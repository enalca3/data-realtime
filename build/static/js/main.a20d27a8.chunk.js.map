{"version":3,"sources":["../node_modules/@aws-amplify/ui-components/dist/esm-es5 lazy /^/.*/.entry/.js$/ include: /.entry/.js$/ exclude: /.system/.entry/.js$/ groupOptions: {} namespace object","App.js","serviceWorker.js","aws-exports.js","index.js","logo.svg"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","withAuthenticator","className","src","logo","alt","Boolean","window","location","hostname","match","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yIAAA,IAAIA,EAAM,CACT,qCAAsC,CACrC,IACA,IAED,mCAAoC,CACnC,IACA,IAED,mCAAoC,CACnC,IACA,GAED,8BAA+B,CAC9B,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,uCAAwC,CACvC,IACA,GAED,+BAAgC,CAC/B,IACA,IAED,yCAA0C,CACzC,IACA,IAED,uCAAwC,CACvC,IACA,IAED,kCAAmC,CAClC,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,iCAAkC,CACjC,IACA,IAED,0BAA2B,CAC1B,IACA,GAED,0BAA2B,CAC1B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,kCAAmC,CAClC,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,oCAAqC,CACpC,IACA,GAED,8BAA+B,CAC9B,IACA,EACA,IAED,qCAAsC,CACrC,IACA,EACA,IAED,8BAA+B,CAC9B,IACA,EACA,IAED,oCAAqC,CACpC,IACA,EACA,IAED,6BAA8B,CAC7B,IACA,EACA,IAED,qCAAsC,CACrC,IACA,IAED,oCAAqC,CACpC,IACA,GAED,6BAA8B,CAC7B,IACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAON,QAAQQ,IAAIF,EAAIG,MAAM,GAAGd,IAAIG,EAAoBK,IAAID,MAAK,WAChE,OAAOJ,EAAoBS,MAG7BX,EAAoBc,KAAO,WAC1B,OAAOC,OAAOD,KAAKf,IAEpBC,EAAoBW,GAAK,IACzBK,EAAOC,QAAUjB,G,mIChHFkB,mBAZf,WACE,OACE,yBAAKC,UAAU,OACb,gCACE,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kDAEF,kBAAC,IAAD,UCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICLSC,EAVG,CACd,mBAAsB,YACtB,6BAAgC,iDAChC,mBAAsB,YACtB,kBAAqB,sBACrB,6BAAgC,6BAChC,MAAS,I,MCFbC,QAAQC,UAAUC,GAElBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBGzI5B7B,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.a20d27a8.chunk.js","sourcesContent":["var map = {\n\t\"./amplify-amazon-button_5.entry.js\": [\n\t\t174,\n\t\t11\n\t],\n\t\"./amplify-auth-fields_9.entry.js\": [\n\t\t175,\n\t\t12\n\t],\n\t\"./amplify-authenticator.entry.js\": [\n\t\t176,\n\t\t5\n\t],\n\t\"./amplify-button_3.entry.js\": [\n\t\t177,\n\t\t13\n\t],\n\t\"./amplify-checkbox.entry.js\": [\n\t\t178,\n\t\t14\n\t],\n\t\"./amplify-confirm-sign-in_8.entry.js\": [\n\t\t179,\n\t\t6\n\t],\n\t\"./amplify-container.entry.js\": [\n\t\t180,\n\t\t15\n\t],\n\t\"./amplify-federated-buttons_2.entry.js\": [\n\t\t181,\n\t\t16\n\t],\n\t\"./amplify-federated-sign-in.entry.js\": [\n\t\t182,\n\t\t17\n\t],\n\t\"./amplify-form-field_4.entry.js\": [\n\t\t183,\n\t\t18\n\t],\n\t\"./amplify-greetings.entry.js\": [\n\t\t184,\n\t\t19\n\t],\n\t\"./amplify-icon-button.entry.js\": [\n\t\t185,\n\t\t20\n\t],\n\t\"./amplify-icon.entry.js\": [\n\t\t186,\n\t\t7\n\t],\n\t\"./amplify-link.entry.js\": [\n\t\t187,\n\t\t21\n\t],\n\t\"./amplify-nav_2.entry.js\": [\n\t\t188,\n\t\t22\n\t],\n\t\"./amplify-photo-picker.entry.js\": [\n\t\t189,\n\t\t23\n\t],\n\t\"./amplify-picker.entry.js\": [\n\t\t190,\n\t\t24\n\t],\n\t\"./amplify-radio-button_2.entry.js\": [\n\t\t191,\n\t\t8\n\t],\n\t\"./amplify-s3-album.entry.js\": [\n\t\t192,\n\t\t0,\n\t\t25\n\t],\n\t\"./amplify-s3-image-picker.entry.js\": [\n\t\t193,\n\t\t0,\n\t\t26\n\t],\n\t\"./amplify-s3-image.entry.js\": [\n\t\t194,\n\t\t0,\n\t\t27\n\t],\n\t\"./amplify-s3-text-picker.entry.js\": [\n\t\t195,\n\t\t0,\n\t\t28\n\t],\n\t\"./amplify-s3-text.entry.js\": [\n\t\t196,\n\t\t0,\n\t\t29\n\t],\n\t\"./amplify-select-mfa-type.entry.js\": [\n\t\t197,\n\t\t30\n\t],\n\t\"./amplify-sign-in-button.entry.js\": [\n\t\t198,\n\t\t9\n\t],\n\t\"./amplify-tooltip.entry.js\": [\n\t\t199,\n\t\t31\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 103;\nmodule.exports = webpackAsyncContext;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>We now have Auth!</h1>\n      </header>\n      <AmplifySignOut />\n    </div>\n  );\n}\n\nexport default withAuthenticator(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"eu-west-2\",\n    \"aws_cognito_identity_pool_id\": \"eu-west-2:da192da4-75c4-4656-a355-11b48e72a390\",\n    \"aws_cognito_region\": \"eu-west-2\",\n    \"aws_user_pools_id\": \"eu-west-2_ZpAH09Qnz\",\n    \"aws_user_pools_web_client_id\": \"66g18ss9sptjf611vi9f63p0i5\",\n    \"oauth\": {}\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\nAmplify.configure(config);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}